[{"content":"Markdown here\n","description":"test post","id":0,"section":"updates","tags":null,"title":"May 2019","uri":"https://danacoding.github.io/updates/2019_may/"},{"content":"Markdown here\n","description":"test post","id":1,"section":"docs","tags":null,"title":"Basic Usage","uri":"https://danacoding.github.io/docs/gettingstarted/basicusage/"},{"content":"Markdown here\n","description":"test post","id":2,"section":"updates","tags":null,"title":"April 2019","uri":"https://danacoding.github.io/updates/2019_april/"},{"content":"Markdown here\n","description":"test post","id":3,"section":"docs","tags":null,"title":"Configuration","uri":"https://danacoding.github.io/docs/gettingstarted/configuration/"},{"content":"Markdown here\n","description":"test post","id":4,"section":"updates","tags":null,"title":"March 2019","uri":"https://danacoding.github.io/updates/2019_march/"},{"content":"Markdown here\n","description":"test post","id":5,"section":"docs","tags":null,"title":"Installation","uri":"https://danacoding.github.io/docs/gettingstarted/installation/"},{"content":"Markdown here\n","description":"test post","id":6,"section":"updates","tags":null,"title":"February 2019","uri":"https://danacoding.github.io/updates/2019_february/"},{"content":"Markdown here\n","description":"test post","id":7,"section":"docs","tags":null,"title":"Quick Start","uri":"https://danacoding.github.io/docs/gettingstarted/quickstart/"},{"content":"Markdown here\n","description":"test post","id":8,"section":"updates","tags":null,"title":"January 2019","uri":"https://danacoding.github.io/updates/2019_january/"},{"content":"Hooks最佳实践\n","description":"","id":9,"section":"react","tags":null,"title":"Hooks最佳实践","uri":"https://danacoding.github.io/react/hooks/bp/"},{"content":"JS最佳实践\n","description":"","id":10,"section":"javascript","tags":null,"title":"JS最佳实践","uri":"https://danacoding.github.io/javascript/javascript/bp/"},{"content":"一、创建 Next.js 应用 yarn create next-app --typescript\r// 命名为 next-app-bronze\ryarn dev\r二、路由（文件系统路由, pages中的文件） Step1. 创建新页面 pages/posts/first-post.tsx\nexport default function FirstPost() {\rreturn \u0026lt;h1\u0026gt;First Post\u0026lt;/h1\u0026gt;\r}\r 通过 http://localhost:3000/posts/first-post 访问\n Step2. 在页面之间导航 \u0026lt;Link href=''\u0026gt;\u0026lt;a\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/Link\u0026gt;\n pages/index.tsx\n import Link from 'next/link';\r\u0026lt;Link href='/posts/first-post'\u0026gt;\r\u0026lt;a\u0026gt;first-post\u0026lt;/a\u0026gt;\r\u0026lt;/Link\u0026gt;\r pages/posts/first-post.tsx\n import Link from 'next/link';\r\u0026lt;Link href='/'\u0026gt;\r\u0026lt;a\u0026gt;Back to Home\u0026lt;/a\u0026gt;\r\u0026lt;/Link\u0026gt;\r三、资产、元数据和CSS 1.图像组件\nimport Image from 'next/image';\rconst YourComponent = () =\u0026gt; (\r\u0026lt;Image\rsrc=\u0026quot;/images/profile.jpg\u0026quot; //图片文件路径\rheight={144} //具有正确纵横比的所需尺寸\rwidth={144} //具有正确纵横比的所需尺寸\ralt=\u0026quot;Your Name\u0026quot;\r/\u0026gt;\r)\r2.元数据 Head\nimport Head from 'next/head';\r\u0026lt;Head\u0026gt;\r\u0026lt;title\u0026gt;Create Next App\u0026lt;/title\u0026gt;\r\u0026lt;meta name=\u0026quot;description\u0026quot; content=\u0026quot;Generated by create next app\u0026quot; /\u0026gt;\r\u0026lt;link rel=\u0026quot;icon\u0026quot; href=\u0026quot;/favicon.ico\u0026quot; /\u0026gt;\r\u0026lt;/Head\u0026gt;\r3.CSS样式 (文件必须以.module.css结尾，这样才能保证className的唯一性)\nimport styles from '../styles/Home.module.css';\r\u0026lt;div className={styles.container}\u0026gt;\r\u0026lt;style jsx\u0026gt;{`\r…\r`}\u0026lt;/style\u0026gt;\r4.布局组件\n components/layout.component.module.css\n .container {\rmax-width: 36rem;\rpadding: 0 1rem;\rmargin: 3rem auto 6rem;\r}\r components/layout.component.tsx\n import { ReactNode } from \u0026quot;react\u0026quot;;\rimport styles from './layout.component.module.css';\rinterface layoutProps {\rchildren?: ReactNode;\r};\rexport default function LayoutComponent({ children }: layoutProps) {\rreturn (\r\u0026lt;div className={styles.container}\u0026gt;{children}\u0026lt;/div\u0026gt;\r);\r};\r components/first-post.tsx\n import Link from 'next/link';\rimport Head from 'next/head';\rimport LayoutComponent from '../../components/layout.component';\rexport default function FirstPost() {\rreturn (\r\u0026lt;LayoutComponent\u0026gt;\r\u0026lt;Head\u0026gt;\r\u0026lt;title\u0026gt;first-post\u0026lt;/title\u0026gt;\r\u0026lt;/Head\u0026gt;\r\u0026lt;h1\u0026gt;\r\u0026lt;Link href='/'\u0026gt;\r\u0026lt;a\u0026gt;Back to Home\u0026lt;/a\u0026gt;\r\u0026lt;/Link\u0026gt;\r\u0026lt;/h1\u0026gt;\r\u0026lt;/LayoutComponent\u0026gt;\r)\r}\r5.全局样式 pages/_app.tsx\nimport '../styles/globals.css'\rimport type { AppProps } from 'next/app'\rfunction MyApp({ Component, pageProps }: AppProps) {\rreturn \u0026lt;Component {...pageProps} /\u0026gt;\r}\rexport default MyApp\r6.使用classnames库\nStep1. 安装 classnames 库\nyarn add classnames\rStep2. 编写CSS模块\n.success {\rcolor: green;\r}\r.error {\rcolor: red;\r}\rStep3. 使用 classnames\nimport { ReactNode } from 'react';\rimport styles from './alert.module.css';\rimport cn from 'classnames';\rinterface alertProps {\rchildren?: ReactNode;\rtype?: 'success' | 'error'\r}\rexport default function Alert({ children, type }: alertProps) {\rreturn (\r\u0026lt;div\rclassName={cn({\r[styles.success]: type === 'success',\r[styles.error]: type === 'error'\r})}\r\u0026gt;\r{children}\r\u0026lt;/div\u0026gt;\r)\r}\r","description":"","id":11,"section":"react","tags":null,"title":"Next 基础","uri":"https://danacoding.github.io/react/next/base/"},{"content":"React最佳实践\n","description":"","id":12,"section":"react","tags":null,"title":"React最佳实践","uri":"https://danacoding.github.io/react/react/bp/"},{"content":"一、创建 Remix 应用 npx create-remix@latest\ryarn dev\r二、创建文件路由  app/root.tsx Layout 组件中\n \u0026lt;li\u0026gt;\r\u0026lt;Link to=\u0026quot;/posts\u0026quot;\u0026gt;Posts\u0026lt;/Link\u0026gt;\r\u0026lt;/li\u0026gt;\r 创建 app/routes/posts/index.tsx\n export default function Posts() {\rreturn (\r\u0026lt;div\u0026gt;\r\u0026lt;h1\u0026gt;Posts\u0026lt;/h1\u0026gt;\r\u0026lt;/div\u0026gt;\r)\r}\r三、加载数据 Remix 的路由文件相当于后端的模板视图，也是控制器，Remix 建立在 HTTP 和 HTML 的基础之上，因此整个过程无需在浏览器中使用 JavaScript。这也是 Remix 的创新之处，我目前的理解是 Remix 类似 Nodejs中间层 ，只是 Remix 将 React 整合到了中间层中。这样做的好处是少了一层，提升性能的同时简化了开发成本，让前端更专注于前端，后端更专注于后端。\nStep1. 项目根目录下（不是app目录） 创建本地文件模拟数据（真实项目往往是从服务器数据库请求数据）\n posts/my-first-post.md\n ---\rtitle: My First Post\r---\r# This is my first post\rIsn't it great?\r posts/90s-mix-cdr.md\n ---\rtitle: 90s Mixtape\r---\r# 90s Mixtape\r- I wish (Skee-Lo)\r- This Is How We Do It (Montell Jordan)\r- Everlong (Foo Fighters)\r- Ms. Jackson (Outkast)\r- Interstate Love Song (Stone Temple Pilots)\r- Killing Me Softly With His Song (Fugees, Ms. Lauryn Hill)\r- Just a Friend (Biz Markie)\r- The Man Who Sold The World (Nirvana)\r- Semi-Charmed Life (Third Eye Blind)\r- ...Baby One More Time (Britney Spears)\r- Better Man (Pearl Jam)\r- It's All Coming Back to Me Now (Céline Dion)\r- This Kiss (Faith Hill)\r- Fly Away (Lenny Kravits)\r- Scar Tissue (Red Hot Chili Peppers)\r- Santa Monica (Everclear)\r- C'mon N' Ride it (Quad City DJ's)\rStep2. 创建 app/post.ts 这个文件是处理posts的模块，在这里模拟请求数据\n 首先安装两个模块 fron-matter tiny-invariant\n yarn add front-matter //node模块\ryarn add tiny-invariant //类型检查\rimport path from \u0026quot;path\u0026quot;;\rimport fs from \u0026quot;fs/promises\u0026quot;;\rimport parseFrontMatter from \u0026quot;front-matter\u0026quot;;\rimport invariant from \u0026quot;tiny-invariant\u0026quot;;\rexport type Post = {\rslug: string;\rtitle: string;\r};\rexport type PostMarkdownAttributes = {\rtitle: string;\r};\r// 相对于服务器输出而不是源！\rconst postsPath = path.join(__dirname, \u0026quot;..\u0026quot;, \u0026quot;posts\u0026quot;);\rfunction isValidPostAttributes(\rattributes: any\r): attributes is PostMarkdownAttributes {\rreturn attributes?.title;\r}\rexport async function getPosts() {\rconst dir = await fs.readdir(postsPath);\rreturn Promise.all(\rdir.map(async filename =\u0026gt; {\rconst file = await fs.readFile(\rpath.join(postsPath, filename)\r);\rconst { attributes } = parseFrontMatter(\rfile.toString()\r);\rinvariant(\risValidPostAttributes(attributes),\r`${filename} 有错误的元数据！`\r);\rreturn {\rslug: filename.replace(/\\.md$/, \u0026quot;\u0026quot;),\rtitle: attributes.title\r};\r})\r);\r}\rStep3. app/routes/posts/index.tsx\nimport { Link, useLoaderData } from 'remix';\rimport { getPosts } from '~/post';\rimport type { Post } from '~/post';\rexport const loader = () =\u0026gt; {\rreturn getPosts();\r};\rexport default function Posts() {\rconst posts = useLoaderData\u0026lt;Post[]\u0026gt;();\rreturn (\r\u0026lt;div\u0026gt;\r\u0026lt;h1\u0026gt;Posts\u0026lt;/h1\u0026gt;\r\u0026lt;ul\u0026gt;\r{posts.map(post =\u0026gt; (\r\u0026lt;li key={post.slug}\u0026gt;\r\u0026lt;Link to={post.slug}\u0026gt;{post.title}\u0026lt;/Link\u0026gt;\r\u0026lt;/li\u0026gt;\r))}\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r)\r};\r四、动态路由 Step1. 首先安装 @types/marked 将 markdown 解析为 HTML\nyarn add marked\ryarn add @types/marked\rStep2. 为 app/post.ts 模块添加一个函数 getPost\nimport path from \u0026quot;path\u0026quot;;\rimport fs from \u0026quot;fs/promises\u0026quot;;\rimport parseFrontMatter from \u0026quot;front-matter\u0026quot;;\rimport invariant from \u0026quot;tiny-invariant\u0026quot;;\rimport { marked } from 'marked';\rexport type Post = {\rslug: string;\rtitle: string;\r};\rexport type PostMarkdownAttributes = {\rtitle: string;\r};\r// 相对于服务器输出而不是源！\rconst postsPath = path.join(__dirname, \u0026quot;..\u0026quot;, \u0026quot;posts\u0026quot;);\rfunction isValidPostAttributes(\rattributes: any\r): attributes is PostMarkdownAttributes {\rreturn attributes?.title;\r};\rexport async function getPosts() {\rconst dir = await fs.readdir(postsPath);\rreturn Promise.all(\rdir.map(async filename =\u0026gt; {\rconst file = await fs.readFile(\rpath.join(postsPath, filename)\r);\rconst { attributes } = parseFrontMatter(\rfile.toString()\r);\rinvariant(\risValidPostAttributes(attributes),\r`${filename} 有错误的元数据！`\r);\rreturn {\rslug: filename.replace(/\\.md$/, \u0026quot;\u0026quot;),\rtitle: attributes.title\r};\r})\r);\r};\rexport async function getPost(slug: string) {\rconst filepath = path.join(postsPath, slug + \u0026quot;.md\u0026quot;);\rconst file = await fs.readFile(filepath);\rconst { attributes, body } = parseFrontMatter(\rfile.toString()\r);\rinvariant(\risValidPostAttributes(attributes),\r`Post ${filepath} is missing attributes`\r);\rconst html = marked(body);\rreturn { slug, html, title: attributes.title };\r}\rStep3. 创建动态路由文件\n app/routes/posts/$slug.tsx\n import { useLoaderData } from 'remix';\rimport type { LoaderFunction } from 'remix';\rimport { getPost } from \u0026quot;~/post\u0026quot;;\rimport invariant from \u0026quot;tiny-invariant\u0026quot;;\rexport const loader: LoaderFunction = async ({ params }) =\u0026gt; {\rinvariant(params.slug, \u0026quot;expected params.slug\u0026quot;);\rreturn getPost(params.slug);\r};\rexport default function PostSlug() {\rconst post = useLoaderData();\rreturn (\r\u0026lt;div dangerouslySetInnerHTML={{ __html: post.html }} /\u0026gt;\r);\r};\r五、子路由（嵌套路由） Step1. 创建一个 admin 路由文件\n app/routes/admin.tsx 注意使用：Outlet\n import { Outlet, Link, useLoaderData } from \u0026quot;remix\u0026quot;;\rimport { getPosts } from \u0026quot;~/post\u0026quot;;\rimport type { Post } from \u0026quot;~/post\u0026quot;;\rimport adminStyles from \u0026quot;~/styles/admin.css\u0026quot;;\rexport const links = () =\u0026gt; {\rreturn [{ rel: \u0026quot;stylesheet\u0026quot;, href: adminStyles }];\r};\rexport const loader = () =\u0026gt; {\rreturn getPosts();\r};\rexport default function Admin() {\rconst posts = useLoaderData\u0026lt;Post[]\u0026gt;();\rreturn (\r\u0026lt;div className=\u0026quot;admin\u0026quot;\u0026gt;\r\u0026lt;nav\u0026gt;\r\u0026lt;h1\u0026gt;Admin\u0026lt;/h1\u0026gt;\r\u0026lt;ul\u0026gt;\r{posts.map(post =\u0026gt; (\r\u0026lt;li key={post.slug}\u0026gt;\r\u0026lt;Link to={`/posts/${post.slug}`}\u0026gt;\r{post.title}\r\u0026lt;/Link\u0026gt;\r\u0026lt;/li\u0026gt;\r))}\r\u0026lt;/ul\u0026gt;\r\u0026lt;/nav\u0026gt;\r\u0026lt;main\u0026gt;\r\u0026lt;Outlet/\u0026gt;\r\u0026lt;/main\u0026gt;\r\u0026lt;/div\u0026gt;\r);\r};\r app/styles/admin.css\n .admin {\rdisplay: flex;\r}\r.admin \u0026gt; nav {\rpadding-right: 2rem;\r}\r.admin \u0026gt; main {\rflex: 1;\rborder-left: solid 1px #ccc;\rpadding-left: 2rem;\r}\rem {\rcolor: red;\r}\rStep2. 为 admin.tsx 创建子路由文件夹\n app/routes/admin/index.tsx\n import { Link } from \u0026quot;remix\u0026quot;;\rexport default function AdminIndex() {\rreturn (\r\u0026lt;p\u0026gt;\r\u0026lt;Link to=\u0026quot;new\u0026quot;\u0026gt;Create a New Post\u0026lt;/Link\u0026gt;\r\u0026lt;/p\u0026gt;\r);\r}\rStep3. 在 app/post.ts 处理新建Post的逻辑\nimport path from \u0026quot;path\u0026quot;;\rimport fs from \u0026quot;fs/promises\u0026quot;;\rimport parseFrontMatter from \u0026quot;front-matter\u0026quot;;\rimport invariant from \u0026quot;tiny-invariant\u0026quot;;\rimport { marked } from 'marked';\rexport type Post = {\rslug: string;\rtitle: string;\r};\rexport type PostMarkdownAttributes = {\rtitle: string;\r};\rtype NewPost = {\rtitle: string;\rslug: string;\rmarkdown: string;\r};\r// 相对于服务器输出而不是源！\rconst postsPath = path.join(__dirname, \u0026quot;..\u0026quot;, \u0026quot;posts\u0026quot;);\rfunction isValidPostAttributes(\rattributes: any\r): attributes is PostMarkdownAttributes {\rreturn attributes?.title;\r};\r//Post列表\rexport async function getPosts() {\rconst dir = await fs.readdir(postsPath);\rreturn Promise.all(\rdir.map(async filename =\u0026gt; {\rconst file = await fs.readFile(\rpath.join(postsPath, filename)\r);\rconst { attributes } = parseFrontMatter(\rfile.toString()\r);\rinvariant(\risValidPostAttributes(attributes),\r`${filename} 有错误的元数据！`\r);\rreturn {\rslug: filename.replace(/\\.md$/, \u0026quot;\u0026quot;),\rtitle: attributes.title\r};\r})\r);\r};\r// Post详情\rexport async function getPost(slug: string) {\rconst filepath = path.join(postsPath, slug + \u0026quot;.md\u0026quot;);\rconst file = await fs.readFile(filepath);\rconst { attributes, body } = parseFrontMatter(\rfile.toString()\r);\rinvariant(\risValidPostAttributes(attributes),\r`Post ${filepath} is missing attributes`\r);\rconst html = marked(body);\rreturn { slug, html, title: attributes.title };\r};\r// 新建Post\rexport async function createPost(post: NewPost) {\rconst md = `---\\ntitle: ${post.title}\\n---\\n\\n${post.markdown}`;\rawait fs.writeFile(\rpath.join(postsPath, post.slug + \u0026quot;.md\u0026quot;),\rmd\r);\rreturn getPost(post.slug);\r};\rStep4. 创建 app/routes/admin/new.tsx\nimport { useTransition, useActionData, Form, redirect } from \u0026quot;remix\u0026quot;;\rimport type { ActionFunction } from \u0026quot;remix\u0026quot;;\rimport { createPost } from \u0026quot;~/post\u0026quot;;\rimport invariant from \u0026quot;tiny-invariant\u0026quot;;\rtype PostError = {\rtitle?: boolean;\rslug?: boolean;\rmarkdown?: boolean;\r};\rexport const action: ActionFunction = async ({\rrequest\r}) =\u0026gt; {\rawait new Promise(res =\u0026gt; setTimeout(res, 1000));\rconst formData = await request.formData();\rconst title = formData.get(\u0026quot;title\u0026quot;);\rconst slug = formData.get(\u0026quot;slug\u0026quot;);\rconst markdown = formData.get(\u0026quot;markdown\u0026quot;);\rconst errors: PostError = {};\rif (!title) errors.title = true;\rif (!slug) errors.slug = true;\rif (!markdown) errors.markdown = true;\rif (Object.keys(errors).length) {\rreturn errors;\r}\rinvariant(typeof title === \u0026quot;string\u0026quot;);\rinvariant(typeof slug === \u0026quot;string\u0026quot;);\rinvariant(typeof markdown === \u0026quot;string\u0026quot;);\rawait createPost({ title, slug, markdown });\rreturn redirect(\u0026quot;/admin\u0026quot;);\r};\rexport default function NewPost() {\rconst errors = useActionData();\rconst transition = useTransition();\rreturn (\r\u0026lt;Form method=\u0026quot;post\u0026quot;\u0026gt;\r\u0026lt;p\u0026gt;\r\u0026lt;label\u0026gt;\rPost Title:{\u0026quot; \u0026quot;}\r{errors?.title \u0026amp;\u0026amp; \u0026lt;em\u0026gt;Title is required\u0026lt;/em\u0026gt;}\r\u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;title\u0026quot; /\u0026gt;\r\u0026lt;/label\u0026gt;\r\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;\r\u0026lt;label\u0026gt;\rPost Slug:{\u0026quot; \u0026quot;}\r{errors?.slug \u0026amp;\u0026amp; \u0026lt;em\u0026gt;Slug is required\u0026lt;/em\u0026gt;}\r\u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;slug\u0026quot; /\u0026gt;\r\u0026lt;/label\u0026gt;\r\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;\r\u0026lt;label htmlFor=\u0026quot;markdown\u0026quot;\u0026gt;Markdown:\u0026lt;/label\u0026gt;{\u0026quot; \u0026quot;}\r{errors?.markdown \u0026amp;\u0026amp; \u0026lt;em\u0026gt;Markdown is required\u0026lt;/em\u0026gt;}\r\u0026lt;br /\u0026gt;\r\u0026lt;textarea id=\u0026quot;markdown\u0026quot; rows={20} name=\u0026quot;markdown\u0026quot; /\u0026gt;\r\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;\r\u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;\r{transition.submission\r? \u0026quot;Creating...\u0026quot;\r: \u0026quot;Create Post\u0026quot;}\r\u0026lt;/button\u0026gt;\r\u0026lt;/p\u0026gt;\r\u0026lt;/Form\u0026gt;\r);\r}\r","description":"","id":13,"section":"react","tags":null,"title":"Remix 基础","uri":"https://danacoding.github.io/react/remix/base/"},{"content":"一、安装配置  在next.js项目中执行\n npx sb init\ryarn storybook\r .storybook/preview.js 为 Storybook 配置 Next.js Images\n + import * as NextImage from \u0026quot;next/image\u0026quot;;\r+ const OriginalNextImage = NextImage.default;\r+ Object.defineProperty(NextImage, \u0026quot;default\u0026quot;, {\rconfigurable: true,\rvalue: (props) =\u0026gt; (\r\u0026lt;OriginalNextImage\r{...props}\runoptimized\r/\u0026gt;\r),\r});\r package.json 为 Storybook 提供 Next.js 公共目录\n {\r...\r\u0026quot;scripts\u0026quot;: {\r- \u0026quot;storybook\u0026quot;: \u0026quot;start-storybook -p 6006\u0026quot;,\r- \u0026quot;build-storybook\u0026quot;: \u0026quot;build-storybook\u0026quot;\r+ \u0026quot;storybook\u0026quot;: \u0026quot;start-storybook -p 6006 -s ./public\u0026quot;,\r+ \u0026quot;build-storybook\u0026quot;: \u0026quot;build-storybook -s public\u0026quot;\r},\r...\r}\r 配置全局样式，这里使用 antd\n yarn add antd\r// `.storybook/preview.js` 为 Storybook 配置全局样式\rimport 'antd/dist/antd.css';\rexport const parameters = {\r...\r...\rlayout: 'fullscreen'\r};\r二、编写故事流程 （组件 -\u0026gt; 故事）  故事细节\n 三、args 获取 状态数据 和 事件  使用其他故事的 args\n  传递给Storybook的事件的写法 (必须带有 \u0026hellip;props, 否则事件无法触发)\n 四、parameters 静态参数 \u0026amp; loaders 加载器 parameters 通常用于控制 Storybook 功能和插件的行为。（一般情况下不需要使用，但不可不知）\nloaders 用于加载故事的数据，加载器可用于加载任何资产、延迟加载组件或从远程 API 获取数据。（一般不需要使用，但不可不知）\n","description":"","id":14,"section":"react","tags":null,"title":"Storybook 基础","uri":"https://danacoding.github.io/react/storybook/base/"},{"content":"TS最佳实践\n","description":"","id":15,"section":"javascript","tags":null,"title":"TS最佳实践","uri":"https://danacoding.github.io/javascript/typescript/bp/"},{"content":"zustand 基于 hooks 的 api，小型、快速且可扩展的状态管理解决方案。\n一、安装 yarn add zustand\r二、最简使用方法  Step1. 创建一个 Store\n import create from 'zustand'\rconst useCount = create(set =\u0026gt; ({\rcount: 0,\rplus: () =\u0026gt; set(state =\u0026gt; ({ count: state.count + 1 })),\rminus: () =\u0026gt; set(state =\u0026gt; ({ count: state.count - 1 })),\rreset: () =\u0026gt; set({ count: 0 })\r}))\r Step2. 绑定组件\n function Counter() {\rconst count = useCount(state =\u0026gt; state.count)\rreturn \u0026lt;h1\u0026gt;{count}\u0026lt;/h1\u0026gt;\r}\rfunction Controls() {\rconst plus = useCount(state =\u0026gt; state.plus)\rconst minus= useCount(state =\u0026gt; state.minus)\rconst reset= useCount(state =\u0026gt; state.reset)\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;button onClick={plus}\u0026gt;+\u0026lt;/button\u0026gt;\r\u0026lt;button onClick={minus}\u0026gt;-\u0026lt;/button\u0026gt;\r\u0026lt;button onClick={reset}\u0026gt;重置\u0026lt;/button\u0026gt;\r\u0026lt;/\u0026gt;\r)\r}\r三、异步操作 const useStore = create(set =\u0026gt; ({\rgirls: {},\rfetch: async pond =\u0026gt; {\rconst response = await fetch(pond)\rset({ girls: await response.json() })\r}\r}))\r四、从操作中读取状态 const useStore = create((set, get) =\u0026gt; ({\rname: \u0026quot;Lucy\u0026quot;,\raction: () =\u0026gt; {\rconst name= get().name\r// ...\r}\r})\r五、在 React 组件之外读写状态 const useStore = create(() =\u0026gt; ({ visible: true }))\r// 在React组件之外获取State的方法\rconst visible= useStore.getState().visible //true\r// 侦听所有更改，在每次更改时同步触发\rconst unsub = useStore.subscribe(console.log)\r// 更新状态，将触发侦听器\ruseStore.setState({ visible: false })\r// 取消订阅侦听\runsub()\r// 销毁商店（删除所有侦听器）\ruseStore.destroy()\r六、瞬时更新（用于频繁发生的状态变化） const useStore = create(set =\u0026gt; ({ girlNum: 0, ... }))\rfunction Component() {\r// 获取初始状态\rconst girlNumRef = useRef(useStore.getState().girlNum)\r// 在挂载时连接到Store，在卸载时断开连接，在引用时捕获状态变化\ruseEffect(() =\u0026gt; useStore.subscribe(\rstate =\u0026gt; (girlNumRef.current = state.girlNum)\r), [])\r七、更新嵌套的状态，使用 Immer import produce from 'immer'\rconst useStore = create(set =\u0026gt; ({\rlush: { forest: { contains: { a: \u0026quot;bear\u0026quot; } } },\rclearForest: () =\u0026gt; set(produce(state =\u0026gt; {\rstate.lush.forest.contains = null\r}))\r}))\rconst clearForest = useStore(state =\u0026gt; state.clearForest)\rclearForest();\r八、状态持久化中间件 persist import create from \u0026quot;zustand\u0026quot;\rimport { persist } from \u0026quot;zustand/middleware\u0026quot;\rexport const useStore = create(persist(\r(set, get) =\u0026gt; ({\rcount: 0,\rplus: () =\u0026gt; set({ count: get().count + 1 })\r}),\r{\rname: \u0026quot;count-storage\u0026quot;, // 唯一的名称\rgetStorage: () =\u0026gt; sessionStorage, // （可选）默认情况下，使用“localStorage”\r}\r))\r九、使用 Redux 开发工具 import { devtools } from 'zustand/middleware'\r// 使用普通操作存储，它将记录操作为“setState”\r// devtools 将只记录来自每个单独存储的操作，这与典型的 redux 存储不同\rconst useStore = create(devtools(store))\r十、TypeScript 类型定义 interface BearState {\rcount: number;\rplus: (by: number) =\u0026gt; void\r}\rconst useStore = create\u0026lt;BearState\u0026gt;(set =\u0026gt; ({\rcount: 0,\rplus: (by) =\u0026gt; set(state =\u0026gt; ({ count: state.count + by })),\r}))\r十一、最佳实践  目录结构\n  1.store/createBearSlice.js\n const createBearSlice = (set, get) =\u0026gt; ({\reatFish: () =\u0026gt; {\rset((prev) =\u0026gt; ({ fishes: prev.fishes \u0026gt; 1 ? prev.fishes - 1 : 0 }));\r}\r});\rexport default createBearSlice;\r 2.store/createFishSlice.js\n const maxFishes = 10;\rconst createFishSlice = (set, get) =\u0026gt; ({\rfishes: maxFishes,\rrepopulate: () =\u0026gt; {\rset((prev) =\u0026gt; ({ fishes: maxFishes }));\r}\r});\rexport default createFishSlice;\r 3.store/createHoneySlice.js\n const createHoneySlice = (set, get) =\u0026gt; ({\rhoneySlice: {\rhoney: 4\r}\r});\rexport default createHoneySlice;\r 4.store/useStore.js\n import create from \u0026quot;zustand\u0026quot;;\rimport createBearSlice from \u0026quot;./createBearSlice\u0026quot;;\rimport createFishSlice from \u0026quot;./createFishSlice\u0026quot;;\rimport createHoneySlice from \u0026quot;./createHoneySlice\u0026quot;;\rconst useStore = create((set, get) =\u0026gt; ({\r...createBearSlice(set, get),\r...createHoneySlice(set, get),\r...createFishSlice(set, get)\r}));\rexport default useStore;\r 5.pages/Mountain.js\n import useStore from \u0026quot;../store/useStore\u0026quot;;\rexport default function Mountain() {\rconst fishes = useStore((state) =\u0026gt; state.fishes);\rconst eatFish = useStore((state) =\u0026gt; state.eatFish);\rconst repopulate = useStore((state) =\u0026gt; state.repopulate);\rconst honey = useStore((state) =\u0026gt; state.honeySlice.honey);\rreturn (\r\u0026lt;div className=\u0026quot;Mountain\u0026quot;\u0026gt;\r\u0026lt;p\u0026gt;Fishes : {fishes}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;honey : {honey}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;\r\u0026lt;button onClick={eatFish}\u0026gt;Eat\u0026lt;/button\u0026gt;\r\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;\r\u0026lt;button onClick={repopulate}\u0026gt;Repopulate\u0026lt;/button\u0026gt;\r\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r);\r}\r","description":"","id":16,"section":"react","tags":null,"title":"zustand 精炼文档","uri":"https://danacoding.github.io/react/zustand/base/"},{"content":"一、创建 Remix 项目 npx create-remix@latest\ryarn\ryarn dev\r二、目录结构   app/ - 所有Remix应用程序代码的位置\n  app/entry.client.tsx- JavaScript 的第一部分，它将在应用程序在浏览器中加载时运行。我们使用此文件来补充我们的 React 组件。\n  app/entry.server.tsx- JavaScript 的第一部分，当请求到达您的服务器时，它将运行。Remix 处理加载所有必要的数据，您负责发回响应。我们将使用此文件将 React 应用呈现为字符串/流，并将其作为响应发送给客户端。\n  app/root.tsx- 应用程序放置根组件的位置。在此处呈现元素。\n  app/routes/- 所有\u0026quot;路由模块\u0026quot;的位置。Remix 使用此目录中的文件根据文件的名称为应用创建 URL 路由。\n  public/ - 静态资产（图像/字体/等）的位置\n  remix.config.js - Remix有一些配置选项，您可以在此文件中设置。\n  三、路由（编程式/文件式） 1.这里使用文件式路由\n app/routes/index.tsx\n export default function IndexRoute() {\rreturn \u0026lt;div\u0026gt;Hello Index Route\u0026lt;/div\u0026gt;;\r}\r2. 子路由（嵌套路由）\n app/root.tsx\n import { LiveReload, Outlet } from \u0026quot;remix\u0026quot;;\rexport default function App() {\rreturn (\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charSet=\u0026quot;utf-8\u0026quot; /\u0026gt;\r\u0026lt;title\u0026gt;Remix: So great, it's funny!\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;Outlet /\u0026gt;\r{process.env.NODE_ENV === \u0026quot;development\u0026quot; ? (\r\u0026lt;LiveReload /\u0026gt;\r) : null}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r);\r}\r app/routes/jokes/index.tsx\n export default function JokesIndexRoute() {\rreturn (\r\u0026lt;div\u0026gt;\r\u0026lt;p\u0026gt;Here's a random joke:\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;\rI was wondering why the frisbee was getting bigger,\rthen it hit me.\r\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r)\r}\r app/routes/jokes/new.tsx\n export default function NewJokeRoute() {\rreturn (\r\u0026lt;div\u0026gt;\r\u0026lt;p\u0026gt;Add your own hilarious joke\u0026lt;/p\u0026gt;\r\u0026lt;form method=\u0026quot;post\u0026quot;\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;label\u0026gt;\rName: \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;name\u0026quot; /\u0026gt;\r\u0026lt;/label\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;label\u0026gt;\rContent: \u0026lt;textarea name=\u0026quot;content\u0026quot; /\u0026gt;\r\u0026lt;/label\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;button type=\u0026quot;submit\u0026quot; className=\u0026quot;button\u0026quot;\u0026gt;\rAdd\r\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/div\u0026gt;\r);\r}\r3.动态路由（参数化路由）\n app/routes/jokes/$jokeId.tsx\n export default function JokeRoute() {\rreturn (\r\u0026lt;div\u0026gt;\r\u0026lt;p\u0026gt;Here's your hilarious joke:\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;\rWhy don't you find hippopotamuses hiding in trees?\rThey're really good at it.\r\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r);\r}\r四、样式  全局样式   app/root.tsx\n import type { LinksFunction } from \u0026quot;remix\u0026quot;;\rimport { Links, LiveReload, Outlet } from \u0026quot;remix\u0026quot;;\rimport globalStylesUrl from \u0026quot;./styles/global.css\u0026quot;;\rimport globalMediumStylesUrl from \u0026quot;./styles/global-medium.css\u0026quot;;\rimport globalLargeStylesUrl from \u0026quot;./styles/global-large.css\u0026quot;;\rexport const links: LinksFunction = () =\u0026gt; {\rreturn [\r{\rrel: \u0026quot;stylesheet\u0026quot;,\rhref: globalStylesUrl\r},\r{\rrel: \u0026quot;stylesheet\u0026quot;,\rhref: globalMediumStylesUrl,\rmedia: \u0026quot;print, (min-width: 640px)\u0026quot;\r},\r{\rrel: \u0026quot;stylesheet\u0026quot;,\rhref: globalLargeStylesUrl,\rmedia: \u0026quot;screen and (min-width: 1024px)\u0026quot;\r}\r];\r};\rexport default function App() {\rreturn (\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charSet=\u0026quot;utf-8\u0026quot; /\u0026gt;\r\u0026lt;title\u0026gt;Remix: So great, it's funny!\u0026lt;/title\u0026gt;\r\u0026lt;Links /\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;Outlet /\u0026gt;\r{process.env.NODE_ENV === \u0026quot;development\u0026quot; ? (\r\u0026lt;LiveReload /\u0026gt;\r) : null}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r);\r}\r组件样式 (需要在root.tsx中调用组件才能渲染)   app/routes/index.tsx\n import type { LinksFunction } from \u0026quot;remix\u0026quot;;\rimport { Link } from \u0026quot;remix\u0026quot;;\rimport stylesUrl from \u0026quot;../styles/index.css\u0026quot;;\rexport const links: LinksFunction = () =\u0026gt; {\rreturn [\r{\rrel: \u0026quot;stylesheet\u0026quot;,\rhref: stylesUrl\r}\r];\r};\rexport default function Index() {\rreturn (\r\u0026lt;div className=\u0026quot;container\u0026quot;\u0026gt;\r\u0026lt;div className=\u0026quot;content\u0026quot;\u0026gt;\r\u0026lt;h1\u0026gt;\rRemix \u0026lt;span\u0026gt;Jokes!\u0026lt;/span\u0026gt;\r\u0026lt;/h1\u0026gt;\r\u0026lt;nav\u0026gt;\r\u0026lt;ul\u0026gt;\r\u0026lt;li\u0026gt;\r\u0026lt;Link to=\u0026quot;jokes\u0026quot;\u0026gt;Read Jokes\u0026lt;/Link\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/nav\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r);\r}\r五、数据库 （这里使用Prisma ORM 和 SQLite 数据库） Step1. 安装 Prisma\n 为 Prisma 安装 VSCode 插件\n yarn add --dev prisma //用于在开发过程中与我们的数据库和schema进行交互\ryarn add @prisma/client //用于在运行时对我们的数据库进行查询\rStep2. 用 SQLite 初始化 Prisma\nnpx prisma init --datasource-provider sqlite\rStep3. 为数据建模\n prisma/schema.prisma\n generator client {\rprovider = \u0026quot;prisma-client-js\u0026quot;\r}\rdatasource db {\rprovider = \u0026quot;sqlite\u0026quot;\rurl = env(\u0026quot;DATABASE_URL\u0026quot;)\r}\rmodel Joke {\rid String @id @default(uuid())\rcreatedAt DateTime @default(now())\rupdatedAt DateTime @updatedAt\rname String\rcontent String\r}\rStep4. 推送数据模型到 SQLite\n 如果您的数据库搞砸了，您可以随时删除该prisma/dev.db文件并npx prisma db push再次运行。\n npx prisma db push\rStep5. 禁止 dev.db 提交到 github\n .gitignore\n /prisma/dev.db\r.env\rStep6. 测试数据填充数据库\n prisma/seed.ts\n import { PrismaClient } from \u0026quot;@prisma/client\u0026quot;;\rconst db = new PrismaClient();\rasync function seed() {\rawait Promise.all(\rgetJokes().map(joke =\u0026gt; {\rreturn db.joke.create({ data: joke });\r})\r);\r}\rseed();\rfunction getJokes() {\r// shout-out to https://icanhazdadjoke.com/\rreturn [\r{\rname: \u0026quot;Road worker\u0026quot;,\rcontent: `I never wanted to believe that my Dad was stealing from his job as a road worker. But when I got home, all the signs were there.`\r},\r{\rname: \u0026quot;Frisbee\u0026quot;,\rcontent: `I was wondering why the frisbee was getting bigger, then it hit me.`\r},\r{\rname: \u0026quot;Trees\u0026quot;,\rcontent: `Why do trees seem suspicious on sunny days? Dunno, they're just a bit shady.`\r},\r{\rname: \u0026quot;Skeletons\u0026quot;,\rcontent: `Why don't skeletons ride roller coasters? They don't have the stomach for it.`\r},\r{\rname: \u0026quot;Hippos\u0026quot;,\rcontent: `Why don't you find hippopotamuses hiding in trees? They're really good at it.`\r},\r{\rname: \u0026quot;Dinner\u0026quot;,\rcontent: `What did one plate say to the other plate? Dinner is on me!`\r},\r{\rname: \u0026quot;Elevator\u0026quot;,\rcontent: `My first time using an elevator was an uplifting experience. The second time let me down.`\r}\r];\r}\r 安装esbuild-register为开发依赖项：\n yarn add --dev esbuild-register\r 运行 seed.ts 文件\n node --require esbuild-register prisma/seed.ts\r 将此添加到package.json,避免每次重置数据都必须记住该脚本\n // ...\r\u0026quot;prisma\u0026quot;: {\r\u0026quot;seed\u0026quot;: \u0026quot;node --require esbuild-register prisma/seed.ts\u0026quot;\r},\r\u0026quot;scripts\u0026quot;: {\r// ...\rStep7. 连接到数据库\n prisma/seed.ts\n import { PrismaClient } from \u0026quot;@prisma/client\u0026quot;;\rconst db = new PrismaClient();\r 创建 app/utils/db.server.ts\n import { PrismaClient } from \u0026quot;@prisma/client\u0026quot;;\rlet db: PrismaClient;\rdeclare global {\rvar __db: PrismaClient | undefined;\r}\r//这是必需的，因为在开发中我们不想在每次更改时都重新启动服务器，\r//但我们想确保我们也不会在每次更改时都创建到数据库的新连接。\rif (process.env.NODE_ENV === \u0026quot;production\u0026quot;) {\rdb = new PrismaClient();\rdb.$connect();\r} else {\rif (!global.__db) {\rglobal.__db = new PrismaClient();\rglobal.__db.$connect();\r}\rdb = global.__db;\r}\rexport { db };\rStep8. 限制数据获取数量\n app/routes/jokes\n type LoaderData = {\rjokeListItems: Array\u0026lt;{ id: string; name: string }\u0026gt;;\r};\rexport const loader: LoaderFunction = async () =\u0026gt; {\rconst data: LoaderData = {\rjokeListItems: await db.joke.findMany({\rtake: 5,\rselect: { id: true, name: true },\rorderBy: { createdAt: \u0026quot;desc\u0026quot; }\r})\r};\rreturn data;\r};\rStep9. 数据库查询\n app/routes/jokes/$jokeId.tsx\n import type { LoaderFunction } from \u0026quot;remix\u0026quot;;\rimport { Link, useLoaderData } from \u0026quot;remix\u0026quot;;\rimport type { Joke } from \u0026quot;@prisma/client\u0026quot;;\rimport { db } from \u0026quot;~/utils/db.server\u0026quot;;\rtype LoaderData = { joke: Joke };\rexport const loader: LoaderFunction = async ({\rparams\r}) =\u0026gt; {\rconst joke = await db.joke.findUnique({\rwhere: { id: params.jokeId }\r});\rif (!joke) throw new Error(\u0026quot;Joke not found\u0026quot;);\rconst data: LoaderData = { joke };\rreturn data;\r};\rexport default function JokeRoute() {\rconst data = useLoaderData\u0026lt;LoaderData\u0026gt;();\rreturn (\r\u0026lt;div\u0026gt;\r\u0026lt;p\u0026gt;Here's your hilarious joke:\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;{data.joke.content}\u0026lt;/p\u0026gt;\r\u0026lt;Link to=\u0026quot;.\u0026quot;\u0026gt;{data.joke.name} Permalink\u0026lt;/Link\u0026gt;\r\u0026lt;/div\u0026gt;\r);\r}\r 随机查询 app/routes/jokes/index.tsx\n import type { LoaderFunction } from \u0026quot;remix\u0026quot;;\rimport { useLoaderData, Link } from \u0026quot;remix\u0026quot;;\rimport type { Joke } from \u0026quot;@prisma/client\u0026quot;;\rimport { db } from \u0026quot;~/utils/db.server\u0026quot;;\rtype LoaderData = { randomJoke: Joke };\rexport const loader: LoaderFunction = async () =\u0026gt; {\rconst count = await db.joke.count();\rconst randomRowNumber = Math.floor(Math.random() * count);\rconst [randomJoke] = await db.joke.findMany({\rtake: 1,\rskip: randomRowNumber\r});\rconst data: LoaderData = { randomJoke };\rreturn data;\r};\rexport default function JokesIndexRoute() {\rconst data = useLoaderData\u0026lt;LoaderData\u0026gt;();\rreturn (\r\u0026lt;div\u0026gt;\r\u0026lt;p\u0026gt;Here's a random joke:\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;{data.randomJoke.content}\u0026lt;/p\u0026gt;\r\u0026lt;Link to={data.randomJoke.id}\u0026gt;\r\u0026quot;{data.randomJoke.name}\u0026quot; Permalink\r\u0026lt;/Link\u0026gt;\r\u0026lt;/div\u0026gt;\r);\r}\rStep10. 突变 （添加数据）\n app/routes/new.tsx\n import type { ActionFunction } from \u0026quot;remix\u0026quot;;\rimport { redirect } from \u0026quot;remix\u0026quot;;\rimport { db } from \u0026quot;~/utils/db.server\u0026quot;;\rexport const action: ActionFunction = async ({\rrequest\r}) =\u0026gt; {\rconst form = await request.formData();\rconst name = form.get(\u0026quot;name\u0026quot;);\rconst content = form.get(\u0026quot;content\u0026quot;);\r// we do this type check to be extra sure and to make TypeScript happy\r// we'll explore validation next!\rif (\rtypeof name !== \u0026quot;string\u0026quot; ||\rtypeof content !== \u0026quot;string\u0026quot;\r) {\rthrow new Error(`Form not submitted correctly.`);\r}\rconst fields = { name, content };\rconst joke = await db.joke.create({ data: fields });\rreturn redirect(`/jokes/${joke.id}`);\r};\rexport default function NewJokeRoute() {\rreturn (\r\u0026lt;div\u0026gt;\r\u0026lt;p\u0026gt;Add your own hilarious joke\u0026lt;/p\u0026gt;\r\u0026lt;form method=\u0026quot;post\u0026quot;\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;label\u0026gt;\rName: \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;name\u0026quot; /\u0026gt;\r\u0026lt;/label\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;label\u0026gt;\rContent: \u0026lt;textarea name=\u0026quot;content\u0026quot; /\u0026gt;\r\u0026lt;/label\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;button type=\u0026quot;submit\u0026quot; className=\u0026quot;button\u0026quot;\u0026gt;\rAdd\r\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/div\u0026gt;\r);\r}\r六、数据验证  app/routes/jokes/new.tsx\n import type { ActionFunction } from \u0026quot;remix\u0026quot;;\rimport { useActionData, redirect, json } from \u0026quot;remix\u0026quot;;\rimport { db } from \u0026quot;~/utils/db.server\u0026quot;;\rfunction validateJokeContent(content: string) {\rif (content.length \u0026lt; 10) {\rreturn `That joke is too short`;\r}\r}\rfunction validateJokeName(name: string) {\rif (name.length \u0026lt; 2) {\rreturn `That joke's name is too short`;\r}\r}\rtype ActionData = {\rformError?: string;\rfieldErrors?: {\rname: string | undefined;\rcontent: string | undefined;\r};\rfields?: {\rname: string;\rcontent: string;\r};\r};\rconst badRequest = (data: ActionData) =\u0026gt;\rjson(data, { status: 400 });\rexport const action: ActionFunction = async ({\rrequest\r}) =\u0026gt; {\rconst form = await request.formData();\rconst name = form.get(\u0026quot;name\u0026quot;);\rconst content = form.get(\u0026quot;content\u0026quot;);\rif (\rtypeof name !== \u0026quot;string\u0026quot; ||\rtypeof content !== \u0026quot;string\u0026quot;\r) {\rreturn badRequest({\rformError: `Form not submitted correctly.`\r});\r}\rconst fieldErrors = {\rname: validateJokeName(name),\rcontent: validateJokeContent(content)\r};\rconst fields = { name, content };\rif (Object.values(fieldErrors).some(Boolean)) {\rreturn badRequest({ fieldErrors, fields });\r}\rconst joke = await db.joke.create({ data: fields });\rreturn redirect(`/jokes/${joke.id}`);\r};\rexport default function NewJokeRoute() {\rconst actionData = useActionData\u0026lt;ActionData\u0026gt;();\rreturn (\r\u0026lt;div\u0026gt;\r\u0026lt;p\u0026gt;Add your own hilarious joke\u0026lt;/p\u0026gt;\r\u0026lt;form method=\u0026quot;post\u0026quot;\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;label\u0026gt;\rName:{\u0026quot; \u0026quot;}\r\u0026lt;input\rtype=\u0026quot;text\u0026quot;\rdefaultValue={actionData?.fields?.name}\rname=\u0026quot;name\u0026quot;\raria-invalid={\rBoolean(actionData?.fieldErrors?.name) ||\rundefined\r}\raria-describedby={\ractionData?.fieldErrors?.name\r? \u0026quot;name-error\u0026quot;\r: undefined\r}\r/\u0026gt;\r\u0026lt;/label\u0026gt;\r{actionData?.fieldErrors?.name ? (\r\u0026lt;p\rclassName=\u0026quot;form-validation-error\u0026quot;\rrole=\u0026quot;alert\u0026quot;\rid=\u0026quot;name-error\u0026quot;\r\u0026gt;\r{actionData.fieldErrors.name}\r\u0026lt;/p\u0026gt;\r) : null}\r\u0026lt;/div\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;label\u0026gt;\rContent:{\u0026quot; \u0026quot;}\r\u0026lt;textarea\rdefaultValue={actionData?.fields?.content}\rname=\u0026quot;content\u0026quot;\raria-invalid={\rBoolean(actionData?.fieldErrors?.content) ||\rundefined\r}\raria-describedby={\ractionData?.fieldErrors?.content\r? \u0026quot;content-error\u0026quot;\r: undefined\r}\r/\u0026gt;\r\u0026lt;/label\u0026gt;\r{actionData?.fieldErrors?.content ? (\r\u0026lt;p\rclassName=\u0026quot;form-validation-error\u0026quot;\rrole=\u0026quot;alert\u0026quot;\rid=\u0026quot;content-error\u0026quot;\r\u0026gt;\r{actionData.fieldErrors.content}\r\u0026lt;/p\u0026gt;\r) : null}\r\u0026lt;/div\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;button type=\u0026quot;submit\u0026quot; className=\u0026quot;button\u0026quot;\u0026gt;\rAdd\r\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;/div\u0026gt;\r);\r}\r七、身份验证 Step1. prisma/schema.prisma\n// This is your Prisma schema file,\r// learn more about it in the docs: https://pris.ly/d/prisma-schema\rgenerator client {\rprovider = \u0026quot;prisma-client-js\u0026quot;\r}\rdatasource db {\rprovider = \u0026quot;sqlite\u0026quot;\rurl = env(\u0026quot;DATABASE_URL\u0026quot;)\r}\rmodel User {\rid String @id @default(uuid())\rcreatedAt DateTime @default(now())\rupdatedAt DateTime @updatedAt\rusername String @unique\rpasswordHash String\rjokes Joke[]\r}\rmodel Joke {\rid String @id @default(uuid())\rjokesterId String\rjokester User @relation(fields: [jokesterId], references: [id], onDelete: Cascade)\rcreatedAt DateTime @default(now())\rupdatedAt DateTime @updatedAt\rname String\rcontent String\r}\rStep2. 重置数据库\nnpx prisma db push\r","description":"","id":17,"section":"react","tags":null,"title":"Remix 进阶（待完善）","uri":"https://danacoding.github.io/react/remix/adv/"},{"content":"Markdown here\n","description":"test post","id":18,"section":"docs","tags":null,"title":"Related content","uri":"https://danacoding.github.io/docs/relatedcontent/"},{"content":"Markdown here\n","description":"test post","id":19,"section":"docs","tags":null,"title":"Page Resources","uri":"https://danacoding.github.io/docs/pageresources/"},{"content":"Markdown here\n","description":"test post","id":20,"section":"docs","tags":null,"title":"Page Bundles","uri":"https://danacoding.github.io/docs/pagebundles/"},{"content":"Markdown here\n","description":"test post","id":21,"section":"docs","tags":null,"title":"Content Formats","uri":"https://danacoding.github.io/docs/contentfortmats/"},{"content":"Markdown here\n","description":"test post","id":22,"section":"docs","tags":null,"title":"Image Processing","uri":"https://danacoding.github.io/docs/imageprocessing/"},{"content":"Markdown here\n","description":"test post","id":23,"section":"docs","tags":null,"title":"Shortcodes","uri":"https://danacoding.github.io/docs/contentmanagement/shortcodes/"},{"content":"Markdown here\n","description":"test post","id":24,"section":"docs","tags":null,"title":"Frontmatter","uri":"https://danacoding.github.io/docs/contentmanagement/frontmatter/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n\rHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","description":"","id":25,"section":"blog","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"https://danacoding.github.io/blog/markdown-syntax/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":26,"section":"docs","tags":["markdown","css","html","themes"],"title":"Section","uri":"https://danacoding.github.io/docs/contentmanagement/sections/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\ninhospita parcite confusaque translucet patri vestro qui optatis\nlumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus\nsilentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria\ntractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra\ndicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere\nfurit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli\nLelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare\nEchionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert\nausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae\nvulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem\nPropoetides parte.\n","description":"","id":27,"section":"blog","tags":["markdown","text"],"title":"Placeholder Text","uri":"https://danacoding.github.io/blog/placeholder-text/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nEmoji can be enabled in a Hugo project in a number of ways.\n\rThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  ","description":"","id":28,"section":"blog","tags":["emoji"],"title":"Emoji Support","uri":"https://danacoding.github.io/blog/emoji-support/"}]