<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on DanaCoding</title>
    <link>https://danacoding.github.io/react/</link>
    <description>Recent content in React on DanaCoding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <copyright>&amp;copy;{year}, DanaCoding</copyright>
    <lastBuildDate>Tue, 28 Jan 2020 00:34:39 +0900</lastBuildDate>
    
        <atom:link href="https://danacoding.github.io/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>React 最佳实践</title>
        <link>https://danacoding.github.io/react/react/react-bp/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:39 +0900</pubDate>
        
        <guid>https://danacoding.github.io/react/react/react-bp/</guid>
        <description>React 最佳实践</description>
      </item>
      
      <item>
        <title>Hooks 最佳实践</title>
        <link>https://danacoding.github.io/react/hooks/hooks-bp/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:39 +0900</pubDate>
        
        <guid>https://danacoding.github.io/react/hooks/hooks-bp/</guid>
        <description>封装一个 useAsync 处理异步调用，应该包含以下内容： 创建一个接受处理函数的自定义钩子，fn. 为自定义hooks的状态定义一个 reducer 函数和一个初始状态。 使用</description>
      </item>
      
      <item>
        <title>zustand 精炼文档</title>
        <link>https://danacoding.github.io/react/zustand/zustand-base/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:39 +0900</pubDate>
        
        <guid>https://danacoding.github.io/react/zustand/zustand-base/</guid>
        <description>zustand 基于 hooks 的 api，小型、快速且可扩展的状态管理解决方案。 一、安装 yarn add zustand 二、最简使用方法 Step1. 创建一个 Store import create from &#39;zustand&#39; const useCount = create(set =&amp;gt; ({ count: 0, plus: () =&amp;gt; set(state =&amp;gt; ({ count: state.count +</description>
      </item>
      
      <item>
        <title>Recoil 最佳实践</title>
        <link>https://danacoding.github.io/react/recoil/recoil-bp/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:39 +0900</pubDate>
        
        <guid>https://danacoding.github.io/react/recoil/recoil-bp/</guid>
        <description>Recoil 是 React 官方 meta (facebook) 官方实验室的状态管理库，贴合 React hooks，自由度很高，所以要在项目中做一些规范，以便提供最佳的实践。 官方文档有对核心概念的解释</description>
      </item>
      
      <item>
        <title>Next 基础</title>
        <link>https://danacoding.github.io/react/next/next-base/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:39 +0900</pubDate>
        
        <guid>https://danacoding.github.io/react/next/next-base/</guid>
        <description>一、创建 Next.js 应用 yarn create next-app --typescript // 命名为 next-app-bronze yarn dev 二、路由（文件系统路由, pages中的文件） Step1. 创建新页面 pages/posts/first-post.tsx export default function FirstPost() { return &amp;lt;h1&amp;gt;First Post&amp;lt;/h1&amp;gt; } 通过 http://localhost:3000/posts/first-post 访问 Step2. 在页面之间导航 &amp;lt;Link</description>
      </item>
      
      <item>
        <title>Remix 基础</title>
        <link>https://danacoding.github.io/react/remix/remix-base/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:39 +0900</pubDate>
        
        <guid>https://danacoding.github.io/react/remix/remix-base/</guid>
        <description>一、创建 Remix 应用 npx create-remix@latest yarn dev 二、创建文件路由 app/root.tsx Layout 组件中 &amp;lt;li&amp;gt; &amp;lt;Link to=&amp;quot;/posts&amp;quot;&amp;gt;Posts&amp;lt;/Link&amp;gt; &amp;lt;/li&amp;gt; 创建 app/routes/posts/index.tsx export default function Posts() { return ( &amp;lt;div&amp;gt; &amp;lt;h1&amp;gt;Posts&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; ) } 三、加载数据 Remix 的路由文件相当于后端的模板视图，也是控制</description>
      </item>
      
      <item>
        <title>Remix 进阶（待完善）</title>
        <link>https://danacoding.github.io/react/remix/remix-adv/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:39 +0900</pubDate>
        
        <guid>https://danacoding.github.io/react/remix/remix-adv/</guid>
        <description>一、创建 Remix 项目 npx create-remix@latest yarn yarn dev 二、目录结构 app/ - 所有Remix应用程序代码的位置 app/entry.client.tsx- JavaScript 的第一部分，它将在应用程序在浏览器中加载时运行。我们使用此文件来</description>
      </item>
      
      <item>
        <title>Storybook 基础</title>
        <link>https://danacoding.github.io/react/storybook/sb-base/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:39 +0900</pubDate>
        
        <guid>https://danacoding.github.io/react/storybook/sb-base/</guid>
        <description>一、安装配置 在next.js项目中执行 npx sb init yarn storybook .storybook/preview.js 为 Storybook 配置 Next.js Images + import * as NextImage from &amp;quot;next/image&amp;quot;; + const OriginalNextImage = NextImage.default; + Object.defineProperty(NextImage, &amp;quot;default&amp;quot;, { configurable: true, value: (props) =&amp;gt; ( &amp;lt;OriginalNextImage {...props} unoptimized /&amp;gt; ), }); package.json 为 Storybook 提供 Next.js 公共目录 {</description>
      </item>
      
    
  </channel>
</rss>